#!/usr/bin/env bash

sessionizer() {
    source "${HOME}/.config/nafi/directories"
    if [[ $# -eq 1 ]]; then
        selected=$1
    else
        selected=$(echo "$ALL_WORKSPACES" | fzf)
    fi

    if [[ -z $selected ]]; then
        return
    fi

    selected_name=$(basename "$selected" | tr . _)
    tmux_running=$(pgrep tmux)

    if [[ -z $TMUX ]] && [[ -z $tmux_running ]]; then
        tmux new-session -s $selected_name -c $selected \; \
            send-keys "${EDITOR}" C-m \; \
            new-window -n "shell" -c $selected
        tmux select-window -t $selected_name:1
        return
    fi

    if ! tmux has-session -t=$selected_name 2> /dev/null; then
        tmux new-session -ds $selected_name -c $selected \; \
            send-keys "${EDITOR}" C-m \; \
            new-window -n "shell" -c $selected
        return
    fi

    if [[ -z $TMUX ]]; then
        tmux attach -t $selected_name
        tmux select-window -t $selected_name:1
    else
        tmux switch-client -t $selected_name
        tmux select-window -t $selected_name:1
    fi
}


goto(){
    source "${HOME}/.config/nafi/directories"
    if [[ $# -eq 1 ]]; then
        selected=$1
    else
        selected=$(echo "$ALL_WORKSPACES" | fzf)
    fi

    if [[ -z $selected ]]; then
        return
    fi

    selected_name=$(basename "$selected" | tr . _)
    if [[ -d $selected ]]; then
        cd "$selected" || exit
    else
        echo "Selected path is not a directory."
        return 
    fi
}


activate(){
    # Find all Python virtual environments in the current directory (recursively)
    venvs=$(find . .. -maxdepth 4 -type f -name 'activate')

    if [[ -z "$venvs" ]]; then
        echo "No Python virtual environments found in the current directory."
        return
    fi

    # Use fzf to select a virtual environment
    selected=$(echo "$venvs" | fzf --prompt="Select a virtualenv to activate: ")

    if [[ -z "$selected" ]]; then
        echo "No virtual environment selected."
        return 
    fi

    # Activate the selected virtual environment
    # shellcheck source=/dev/null
    source "$selected"
}